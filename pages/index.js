import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import Web3 from 'web3';
import { useEffect, useState } from 'react';
import Web3WsProvider from 'web3-providers-ws';
import { useWeb3React } from '@web3-react/core';
import { injected } from '../connectors';

import forwarderAbi from '../abi/Forwarder.json';
import registryAbi from '../abi/Registry.json';
import { ethers } from 'ethers';

const EIP712Domain = [
	{ name: 'name', type: 'string' },
	{ name: 'version', type: 'string' },
	{ name: 'chainId', type: 'uint256' },
	{ name: 'verifyingContract', type: 'address' },
];

const ForwardRequest = [
	{ name: 'from', type: 'address' },
	{ name: 'to', type: 'address' },
	{ name: 'value', type: 'uint256' },
	{ name: 'gas', type: 'uint256' },
	{ name: 'nonce', type: 'uint256' },
	{ name: 'data', type: 'bytes' },
];

function getMetaTxTypeData(chainId, verifyingContract) {
	return {
		types: {
			EIP712Domain,
			ForwardRequest,
		},
		domain: {
			name: 'MinimalForwarder',
			version: '0.0.1',
			chainId,
			verifyingContract,
		},
		primaryType: 'ForwardRequest',
	};
}

export default function Home() {
	const { activate, library, connector, deactivate, account } = useWeb3React();
	const [forwarderContract, setForwarderContract] = useState(null);
	const [registryContract, setRegistryContract] = useState(null);
	const [registers, setRegisters] = useState(null);

	console.log('useWeb3React()', useWeb3React());
	const getInstance = async (address, abi) => {
		const provider = new ethers.providers.Web3Provider(library.provider);
		const contract = new ethers.Contract(address, abi, provider);
		return contract;
	};

	useEffect(() => {
		(async () => {
			if (library && account) {
				const forwarderCon = await getInstance('0x4DA46bA4DBE3c49b51Fea12E1D9Ae71021768Db0', forwarderAbi);
				setForwarderContract(forwarderCon);
				const registryCon = await getInstance('0xf6182B90EF0feD5b838918e7eD0bEa3159577b0C', registryAbi);
				setRegistryContract(registryCon);
			}
		})();
	}, [library, account]);

	const loadData = async () => {};

	const [message, setMessage] = useState('');

	const signEIP721 = async () => {
		const signature = await library.eth.personal.sign(message, account, '');
		console.log('signature', signature);
	};

	// Track events and react saved Quotes
	useEffect(() => {
		(async () => {
			if (registryContract) {
				const filters = await registryContract.filters.Registered();
				registryContract.queryFilter(filters, 28184935, 'latest').then((events) => {
					let registers = [];
					events.forEach((event) => {
						registers.push({
							name: event.args.name,
							who: event.args.who,
						});
					});
					setRegisters(registers);
				});
			}
		})();
	}, [registryContract]);

	// Register a new user without Gasless (MetaTx)
	const register = async () => {
		console.log('registryContract', registryContract);
		const tx = await registryContract.register(message);
		console.log('tx', tx);
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<div style={{ display: 'flex', justifyContent: 'flex-end', padding: '1rem 0' }}>
				{account && <button style={{ padding: '0.5rem' }}>{account}</button>}
			</div>
			<div
				style={{
					display: 'flex',
					flexDirection: 'column',
					justifyContent: 'center',
					alignItems: 'center',
					height: '100vh',
				}}
			>
				<div style={{ marginTop: '-15rem' }}>
					<input
						onChange={(e) => setMessage(e.target.value)}
						type='text'
						style={{ width: '400px', padding: '0.5rem', outline: 'none' }}
					/>
					<button style={{ padding: '0.5rem' }} onClick={register}>
						Save
					</button>
				</div>

				{registers && (
					<div style={{ marginTop: '1rem' }}>
						{registers.map((register, index) => {
							return (
								<div key={index} style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
									<p>{register.name}</p>
									<span>==</span>
									<p>{register.who}</p>
								</div>
							);
						})}
					</div>
				)}

				{!account && <button onClick={() => activate(injected)}>Watch</button>}
			</div>
		</div>
	);
}
